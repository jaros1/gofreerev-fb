<%= hidden_field_tag :newest_gift_id, @newest_gift_id, :id => "newest-gift-id" %>
<%= hidden_field_tag :newest_status_update_at, @newest_status_update_at, :id => "newest-status-update-at" %>

<script>
    last_user_ajax_comment_at = null;
    <%=
      # recheck invalid picture urls with owner permissions
      @missing_api_picture_urls
    %>
</script>

<%# hidden table with links to grant write access to api walls %>
<table id="hidden_tasks_errors" style="display:none">
<%= render :partial => 'shared/translate_ajax_errors' %>
</table>

<%# create new gift form -%>
<div style="width: 100%"><%= t '.create_gift_header_line' %></div>
<div style="width: 100%">
  <%= form_for @gift, :html => {:enctype => 'multipart/form-data', :id => 'new_gift'} do |f| -%>
      <table>
        <tr title="<%= t '.price_title', :min_interest => NEG_INT_POS_BALANCE_PER_YEAR, :max_interest => NEG_INT_NEG_BALANCE_PER_YEAR %>">
          <td><%= t '.price_prompt' %></td>
          <td>
            <%= f.text_field(:price, :size => 10, :maxlength => 10) %>
            <%= t '.price_free' %>
            <%= @user.currency %>
            &nbsp;&nbsp;&nbsp;
            <div style="text-wrap: none">
              <%= t '.direction_giver_prompt' %> <%= f.radio_button :direction, 'giver' %>&nbsp;&nbsp;
              <%= t '.direction_receiver_prompt' %> <%= f.radio_button :direction, 'receiver' %>
            </div>
          </td>
        </tr>
        <tr title="<%= t '.description_title' %>">
          <td style="vertical-align: top"><%= t '.description_prompt' %></td>
          <td><%= f.text_area :description, :size => '60x2', :placeholder => 'Enter Comments', :onfocus => 'autoresize_text_field(this)', :class => 'new_gift_text' %>
            <%= f.submit t('.gift_submit_button_text'), :onclick => '{return csv_gift()}', :class => 'submit_gift_large' %></td>
        </tr>
        <tr title="<%= t ".file_title_#{User.post_image_allowed?(@users)}", :appname => APP_NAME, :apiname => @user.api_name_without_brackets %>">
          <td>
            <div class="fileupload bottom">
              <%= t '.file_prompt' %>
              <%= file_field_tag :gift_file, :disabled => !User.post_image_allowed?(@users), :id => "gift_file", :class => "upload",
                                 :onchange => '{document.getElementById("disp_gift_file").value = this.value}' %>
            </div>
          </td>
          <td>
            <%= text_field_tag '', '', :id => "disp_gift_file", :placeholder => "Choose File", :disabled => "disabled", :style => "line-height:16px;" %>
          </td>
        </tr>
        <tr class="submit_gift_small">
          <td></td>
          <td><%= f.submit t('.gift_submit_button_text'), :onclick => '{return csv_gift()}' %></td>
        </tr>
      </table>
  <% end # form   -%>
</div>
<div class="demo-wrapper html5-progress-bar" id="progressbar-div" style="display: none">
  <div class="progress-bar-wrapper">
    <progress id="progressbar" value="0" max="100"></progress>
    <span class="progress-value">0%</span>
  </div>
</div>
<div style="width: 100%">
  <hr>
</div>

<%# special messages to new users how to get started -%>
<% if @api_gifts.size == 0
     hr = true
-%>
    <div id="no-gifts-div" style="width: 100%">
      <%= t '.no_gifts_was_found_html', :appname => APP_NAME, :apiname => @user.api_name_without_brackets %>
    </div>
<% end -%>
<% if User.no_app_friends(@users) == 0 -%>
    <%= hr = true ; render :partial => 'shared/no_app_friends' %>
<% end -%>
<% if hr -%>
    <div style="width: 100%">
      <hr>
    </div>
<% end -%>

<%# gifts table -%>
<div style="width: 100%">
<table id="gifts" style="display: <%= @api_gifts.size == 0 ? 'none' : 'inline' %>">
  <%= render :partial => 'table_header_row' %>
  <%= render :partial => 'api_gifts' %>
</table>
</div>
<br/>

<%# add remote link to get more rows and call javascript to setup end of page event and post ajax handling of the new rows. set DEBUG_AJAX to true in initializers/constraints.rb to get more ajax debug information -%>
<%= link_to "show-more-rows", "/gifts?last_row_id=#{@last_row_id}", :remote => true, :id => "show-more-rows-link", :style => "display: none" %>
<%= render :partial => 'shared/show_more_rows', :locals => {:show_more_rows => 'gifts'} %>

<script>
    // add page specific version of pre_update_currency function.
    // That is confirm popup before leaving page with unsaved data.
    pending_gift_msg = '<%= t '.pending_gift_popup_msg' %>';
    pre_update_currency = gifts_pre_update_currency;

    // Translate texts used in client side validations.
    csv_gift_description_required = '<%= t '.description_required_text' %>';
    csv_gift_price_invalid = '<%= t '.price_invalid_text' %>';
    csv_comment_comment_required = '<%= t '.comment_comment_required_text' %>';
    csv_comment_price_invalid = '<%= t '.comment_price_invalid_text' %>';

</script>

<script>

    function create_new_com_errors_table(table_id) {
        // table_id = gift-890-comment-new-errors
        var pgm = 'create_new_com_errors_table: ' ;
        var re1 = new RegExp('^gift-[0-9]+-comment-new-errors$') ;
        if (!table_id.match(re1)) return false ; // not a new comment error
        giftid = table_id.split('-')[1] ;
        add2log(pgm + 'giftid = ' + giftid) ;
        ref_id = 'gift-' + giftid + '-comment-new-price-tr' ;
        add2log(pgm + 'ref_id = ' + ref_id) ;
        ref = document.getElementById(ref_id) ;
        if (!ref) {
            add2log(pgm + ref_id + ' was not found. ') ;
            return false ;
        }
        // find table with gift-<giftid>-comment-new-price-tr row
        var tbody = ref.parentNode ;
        var rows = tbody.rows ;
        add2log(pgm + rows.length + ' rows in table') ;
        if (rows.length != 3) {
            add2log(pgm + 'Expected 3 rows in table with ' + ref_id + '. Found ' + rows.length + ' rows.') ;
            return false ;
        }
        // add new table row with table for ajax error messages
        var row = tbody.insertRow(rows.length) ;
        var cell = row.insertCell(0) ;
        cell.setAttribute("colspan",2);
        cell.innerHTML = '<table id="' + table_id + '"></table>' ;
        return true ;
    } // create_new_com_errors_table

    // try to move ajax error messages from tasks_errors2 to more specific location in page
    // first column is error message. Second column is id for error table in page
    // tasks_errors table in page header will be used of more specific location can not be found
    function move_tasks_errors2() {
        var from_table = document.getElementById('tasks_errors2') ;
        if (!from_table) {
            add_to_tasks_errors('tasks_errors2 was not found') ;
            return ;
        }
        var rows = from_table.rows ;
        var lng = rows.length ;
        var row, cells, msg, to_table_id, to_table ;
        var re1, giftid, ref_id, ref, new_tr, new_td, j ;
        // add2log(lng + ' rows in tasks_errors2 table') ;
        for (var i=lng-1 ; i >= 0 ; i--) {
            row = rows[i] ;
            cells = row.cells ;
            if (cells.length != 2) {
                add_to_tasks_errors('Invalid number of cells in tasks_errors row ' + i + '. Expected 2 cells. Found ' + cells.length + ' cells') ;
                continue ;
            }
            msg = cells[0].innerHTML ;
            to_table_id = cells[1].innerHTML ;
            add2log('msg = ' + msg + ', to_table_id = ' + to_table_id) ;
            // use to_table if to_table already exists
            to_table = document.getElementById(to_table_id) ;
            if (!to_table) {
                // create missing table
                if (!create_gift_links_errors_table(to_table_id) &&
                    !create_new_com_errors_table(to_table_id)) {
                    // could not create inside page error table
                    add_to_tasks_errors(msg + ' (inject not implemented for error message with id ' + to_table_id + ').') ;
                    continue
                }
                // error table was created
                to_table = document.getElementById(to_table_id) ;
            }
            // move error message
            add_to_tasks_errors2(to_table_id, msg) ;
            row.parentNode.removeChild(row) ;
        } // for
        // alert('move_tasks_errors2. lng = ' + lng);
    } // move_tasks_errors2

</script>